

# ==============================================================================
# -- input --------------------------------------------------------------------
# ==============================================================================
from __future__ import print_function

import argparse
import collections
import datetime
import glob
import logging
import math
from math import *
from numpy import *
import os
import random
import re
import sys
import weakref
from collections import deque
from matplotlib.pyplot import *
import matplotlib.pyplot as plt
import scipy.io as scio
import copy

sys.path.append('D:\carla0_9_4\CARLA_0.9.4\PythonAPI\carla-0.9.4-py3.7-win-amd64.egg');
sys.path.append('D:\carla0_9_4\CARLA_0.9.4');
sys.path.append('D:\carla0_9_4\CARLA_0.9.4\PythonAPI');

sys.path.append("D:\py_workspace\carla_demo\运动基元提取\运动基元提取\PythonRobotics-master\PathPlanning\CubicSpline")

try:
    import cubic_spline_planner
except:
    raise


try:
    import pygame
    from pygame.locals import KMOD_CTRL
    from pygame.locals import KMOD_SHIFT
    from pygame.locals import K_0
    from pygame.locals import K_9
    from pygame.locals import K_BACKQUOTE
    from pygame.locals import K_BACKSPACE
    from pygame.locals import K_COMMA
    from pygame.locals import K_DOWN
    from pygame.locals import K_ESCAPE
    from pygame.locals import K_F1
    from pygame.locals import K_LEFT
    from pygame.locals import K_PERIOD
    from pygame.locals import K_RIGHT
    from pygame.locals import K_SLASH
    from pygame.locals import K_SPACE
    from pygame.locals import K_TAB
    from pygame.locals import K_UP
    from pygame.locals import K_a
    from pygame.locals import K_c
    from pygame.locals import K_d
    from pygame.locals import K_h
    from pygame.locals import K_m
    from pygame.locals import K_p
    from pygame.locals import K_q
    from pygame.locals import K_r
    from pygame.locals import K_s
    from pygame.locals import K_w
    from pygame.locals import K_MINUS
    from pygame.locals import K_EQUALS
except ImportError:
    raise RuntimeError('cannot import pygame, make sure pygame package is installed')

try:
    import numpy as np
except ImportError:
    raise RuntimeError(
        'cannot import numpy, make sure numpy package is installed')

# find carla module 
try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

# add PythonAPI for release mode 
try:
    sys.path.append(glob.glob('PythonAPI')[0])
except IndexError:
    pass

import carla
from carla import ColorConverter as cc
#from agents.navigation.roaming_agent import RoamingAgent
#from agents.navigation.basic_agent import BasicAgent

try:
    sys.path.append(glob.glob('**/*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla
from carla import *
from carla import ColorConverter as cc
from agents.navigation.roaming_agent import RoamingAgent
from agents.navigation.basic_agent import BasicAgent
import random
import time
import pygame

# ==============================================================================
# ------------------------------------------------------------------------------
# ==============================================================================
def Longitudinal_PID_control(vel_exp,v):   # PID
    err[0,0] = vel_exp - v
    inte[0,0] = inte[0,0] + err[0,0]
    deri[0,0] = err[0,0] - err_last[0,0]
    PID = KP[0,0] * err[0,0] + KI[0,0] * inte[0,0] + KD[0,0] * deri[0,0]
    if PID < 0 :
        throttle = 0
    elif PID > 100 :
        throttle = 1
    else :
        throttle = PID / 100

    tem_brake = -1 * PID * 10
    if tem_brake < 0 :
        brake = 0
    elif tem_brake > 150 :
        brake = 1
    else :
        brake = tem_brake / 150        
    err_last[0,0] = err[0,0]
    return throttle,brake



def state_req(obj,pos,cosx,cosy) :
    vx_l = obj.x
    vy_l = obj.y
    v = round(sqrt(pow(vx_l,2) + pow(vy_l,2)),3)
    
    x = round(pos.location.x,3)
    y = round(pos.location.y,3)
    yaw = round(pos.rotation.yaw,3)
        
    
    x = x - cosx 
    y = cosy - y
    yaw = -yaw * pi / 180
    
    return v,x,y,yaw

def calc_target_index(x,y,yaw, cx, cy):
    """
    Compute index in the trajectory list of the target.

    :param state: (State object)
    :param cx: [float]
    :param cy: [float]
    :return: (int, float)
    """
   # Calc front axle position
    fx = x + L * cos(yaw)
    fy = y + L * sin(yaw)

    # Search nearest point index
    dx = [fx - icx for icx in cx]
    dy = [fy - icy for icy in cy]
    d = [sqrt(idx ** 2 + idy ** 2) for (idx, idy) in zip(dx, dy)]
    closest_error = min(d)
    target_idx = d.index(closest_error)

    # Project RMS error onto front axle vector
    front_axle_vec = [-cos(yaw + pi / 2),
                      -sin(yaw + pi / 2)]
    error_front_axle = dot([dx[target_idx], dy[target_idx]], front_axle_vec)

    return target_idx, error_front_axle

def normalize_angle(angle):
    """
    Normalize an angle to [-pi, pi].

    :param angle: (float)
    :return: (float) Angle in radian in [-pi, pi]
    """
    while angle > pi:
        angle -= 2.0 * pi

    while angle < -pi:
        angle += 2.0 * pi

    return angle

def stanley_control(v,x,y,yaw, cx, cy, cyaw, last_target_idx):  # stanley
    """
    Stanley steering control.

    :param state: (State object)
    :param cx: ([float])
    :param cy: ([float])
    :param cyaw: ([float])
    :param last_target_idx: (int)
    :return: (float, int)
    """
    current_target_idx, error_front_axle = calc_target_index(x,y,yaw, cx, cy)

    if last_target_idx >= current_target_idx:
        current_target_idx = last_target_idx

    # theta_e corrects the heading error
    theta_e = normalize_angle(cyaw[current_target_idx] - yaw)
    # theta_d corrects the cross track error
    theta_d = arctan2(k * error_front_axle, v)
    # Steering control
    delta = theta_e + theta_d

    return delta, current_target_idx



def state_initialization(v_or) :
    # s0
    for i2 in range (54) :
        
        v,x,y,yaw = state_req(vehicle.get_velocity(),vehicle.get_transform(),-355.724,29.8407)


        if v > v_or:
            break

        control.throttle = thr_list_hv[i2]
        control.brake = bra_list_hv[i2]
        control.steer = str_list_hv[i2]


        vehicle.apply_control(control)
        time.sleep(dt)
        
        #print(target_speed)
        #print(throttle)

    print('初始化本车',v,x,y,yaw)

def calc_v(cx , cy , ct):
    cv = []
    for gi in range(len(ct)-1):
        if gi == (len(ct) - 1) :
            break
        gapx = cx[gi+1] - cx[gi]
        while gapx < 0:  
            cx.pop(gi+1)
            cy.pop(gi+1)
            ct.pop(gi+1)
            if gi == (len(ct) - 1):
                break
            gapx = cx[gi + 1] - cx[gi]
        if gi == (len(ct) - 1) :
            break
        gapy = cy[gi+1] - cy[gi]
        gap = sqrt(gapx ** 2 + gapy ** 2 )
        gapv = gap/(0.04 * (ct[gi+1] - ct[gi]))
        cv.append(gapv)


    cv.append(gapv)
    return cv , cx , cy , ct
   
# ==============================================================================
# -- 初始化 --------------------------------------------------------------------
# ==============================================================================
#the parameters of longitudinal PID controller of the ego car
err = mat([0])
err_last = mat([0])
inte = mat([89])
deri = mat([0])
KP = mat([10])
KI = mat([0.661])
KD = mat([0.065])


max_simulation_time = 100
dt = 0.1
target_speed = 12  # [m/s]
L = 2.89 # wheel base
k = 0.5  # control gain
#k = 1.5


control = VehicleControl(throttle=0,steer=0,brake =0)
number_of_cycles = max_simulation_time / dt
throttle = 0
brake = 0
steer = 0
index = 0
pointer = mat([0])


md = 3 
data = scio.loadmat('D:/研零/drivermodel_new.mat')
model = "drivermodel" + str(md)
model_data = copy.deepcopy(data[model])
model_data = model_data[1:, :] 
model_data_2 = copy.deepcopy(model_data)
for ttttt in range(model_data_2.shape[0]): 
    linshi=model_data_2[ttttt,42]
    linshi[:,2]=-linshi[:,2]
# model_data_2[:,42][:,2] = -model_data_2[:,42][:,2]
model_data=np.r_[model_data,model_data_2]
rows = model_data.shape[0] # cols

for traj_i in range(rows):   #rows
    traj_x = []
    traj_y = []
    traj_time = []
    cl_data = model_data[traj_i, 42]
    traj_x = list(cl_data[:, 1])        
    traj_x = np.asarray(traj_x)
    traj_x = traj_x.ravel()
    # waypoint_x = waypoint_x.reshape(-1)
    # waypoint_x = waypoint_x.squeeze()
    traj_x = traj_x - traj_x[0]
    traj_x = traj_x.tolist()







    traj_y = list(cl_data[:, 2])
    traj_y = np.asarray(traj_y)
    traj_y = traj_y.ravel()
    # waypoint_y = waypoint_y.reshape(-1)
    # waypoint_y = waypoint_y.squeeze()
    traj_y = traj_y - traj_y[0]
    traj_y = traj_y.tolist()

    traj_time = list(cl_data[:, 0])
    traj_time = np.asarray(traj_time)
    traj_time = traj_time.ravel()
    # waypoint_time = waypoint_time.reshape(-1)
    # waypoint_time = waypoint_time.squeeze()
    traj_time = traj_time - traj_time[0]
    traj_time = traj_time.tolist()

    traj_v , traj_x , traj_y , traj_time= calc_v(traj_x , traj_y , traj_time)

    waypoint_x = []
    waypoint_y = []
    waypoint_yaw = []
    waypoint_v = []
    bin_num = []

    waypoint_x, waypoint_y, waypoint_yaw, ck, s = cubic_spline_planner.calc_spline_course(traj_x, traj_y, ds=0.1)   #算出yaw
    bin_num = np.digitize(x = waypoint_x, bins = traj_x)
    for bin_i in bin_num:
        waypoint_v.append(traj_v[bin_i])      #每个点的理想的对应的v








    # waypoint_x = [0.0, 0.1, 0.2, 0.29999999998062216, 0.39999999980718703, 0.49999999911729887, 0.5999999972116132, 0.6999999929477609, 0.7999999846374015, 0.8999999699463774, 0.9999999457979464, 1.0999999082790597, 1.1999998525496667, 1.2999997727550108, 1.399999661940902, 1.4999995119719305, 1.5999993134525987, 1.699999055651348, 1.7999987264274548, 1.8999983121607693, 1.9999977976842696, 2.0999971662194135, 2.1999963993142573, 2.29999547678432, 2.3999943766561667, 2.4999930751136867, 2.599991546447054, 2.6999897630043193, 2.7999876951456444, 2.8999853112001257, 2.999982577425202, 3.0999794579686157, 3.199975914832904, 3.2999719078423975, 3.3999673946127085, 3.4999623305226732, 3.5999566686887428, 3.699950359941778, 3.799943352806244, 3.899935593481774, 3.999927025827073, 4.09991759134615, 4.199907229176847, 4.299895876081637, 4.399883466440691, 4.499869932247149, 4.59985520310462, 4.699839206226841, 4.799821866439503, 4.899803106184212, 4.999782845524544, 5.099761002154195, 5.199737491407174, 5.299712226270049, 5.399685117396175, 5.499656073121917, 5.599624999484823, 5.699591800243729, 5.799556376900757, 5.899518628725193, 5.999478452779213, 6.099435743945429, 6.199390394956213, 6.299342296424805, 6.39929133687814, 6.499237402791393, 6.599180378624182, 6.699120146858437, 6.7990565880378755, 6.898989580809067, 6.9989190019640475, 7.098844726484472, 7.19876662758724, 7.298684576771604, 7.39859844386769, 7.498508097086418, 7.5984134030708015, 7.698314226948547, 7.798210432385985, 7.89810188164323, 7.99798843563061, 8.097869953966239, 8.197746295034802, 8.297617316047424, 8.397482873102637, 8.497342821248438, 8.597197014545287, 8.697045306130175, 8.796887548281559, 8.896723592485257, 8.996553289501199, 9.096376489430998, 9.196193041786337, 9.296002795558095, 9.395805599286223, 9.49560130113028, 9.595389748940613, 9.695170790330168, 9.79494427274686, 9.894710043546448, 9.994467950065964, 10.094217839697535, 10.19395955996265, 10.29369295858683, 10.39341788357459, 10.493134183284743, 10.59284170650595, 10.692540302532509, 10.79222982124032, 10.89191011316302, 10.99158102956822, 11.09124242253382, 11.190894145024371, 11.290536050967429, 11.390167995329897, 11.489789834194273, 11.589401424834822, 11.68900262579356, 11.788593296956122, 11.888173299627368, 11.987742496606776, 12.087300752263541, 12.18684793261135, 12.28638390538283, 12.38590854010361, 12.485421708165953, 12.584923282901977, 12.684413139656348, 12.783891155858525, 12.883357211094427, 12.982811187177532, 13.082252968219402, 13.18168244069956, 13.281099493534722, 13.380504018147342, 13.479895908533454, 13.57927506132976, 13.678641375879979, 13.77799475430039, 13.877335101544576, 13.976662325467316, 14.075976336887631, 14.175277049650946, 14.274564380690334, 14.373838250086843, 14.473098581128895, 14.57234530037068, 14.67157833768958, 14.77079762634261, 14.87000310302181, 14.969194707908581, 15.068372384727022, 15.167536080796127, 15.266685747080935, 15.365821338242561, 15.46494281268712, 15.564050132613497, 15.663143264059997, 15.76222217694982, 15.861286845135398, 15.960337246441496, 16.05937336270719, 16.158395179826613, 16.257402687788453, 16.35639588071433, 16.45537475689586, 16.554339318830515, 16.65328957325627, 16.75222553118496, 16.851147207934403, 16.950054623159275, 17.048947800880715, 17.14782676951464, 17.24669156189883, 17.3455422153187, 17.444378771531813, 17.543201276791105, 17.642009781866815, 17.74080434206716, 17.839585017257654, 17.938351871879235, 18.037104974964993, 18.135844400155666, 18.234570225713867, 18.333282534536917, 18.43198141416846, 18.530666956808794, 18.62933925932381, 18.727998423252767, 18.826644554814614, 18.925277764913154, 19.02389816914082, 19.122505887781198, 19.221101045810215, 19.319683772896052, 19.418254203397773, 19.516812476362585, 19.615358735521884, 19.71389312928595, 19.81241581073732, 19.91092693762292, 20.009426672344834, 20.107915181949785, 20.206392638117325, 20.304859217146678, 20.4033150999423, 20.5017604719981, 20.60019552338036, 20.69862044870929, 20.797035447139333, 20.89544072233804, 20.993836482463667, 21.092222940141397, 21.19060031243819, 21.288968820836367, 21.38732869120569, 21.485680153774172, 21.58402344309745, 21.68235879802677, 21.780686461675575, 21.879006681384656, 21.97731970868589, 22.075625799264497, 22.1739252129199, 22.27221821352505, 22.370505068984265, 22.46878605118961, 22.567061435975678, 22.665331503072885, 22.763596536059175, 22.861856822310102, 22.960112652947384, 23.05836432278571, 23.156612130277978, 23.254856377458832, 23.35309736988641, 23.451335416582452, 23.54957082997054, 23.647803925812617, 23.74603502314359, 23.844264444204097, 23.942492514371374, 24.04071956208814, 24.138945918789517, 24.237171918827926, 24.33539789939588, 24.433624200446715, 24.5318511646131, 24.630079137123396, 24.728308465715713, 24.826539500549686, 24.924772594115893, 25.023008101142832, 25.121246378501432, 25.219487785107102, 25.317732681819056, 25.415981431337137, 25.5142343980958, 25.612491948155416, 25.710754449090626, 25.80902226987588, 25.90729578076791, 26.00557535318517, 26.103861359584126, 26.20215417333233, 26.30045416857821, 26.39876172011744, 26.497077203255905, 26.59540099366904, 26.693733467257587, 26.7920749999996, 26.890425967798627, 26.98878674632797, 27.08715771087093, 27.18553923615696, 27.283931696193537, 27.382335464093817, 27.480750911899754, 27.57917841040078, 27.67761832894779, 27.776071035262373, 27.87453689524123, 27.973016272755537, 28.07150952944529, 28.170017024508372, 28.268539114484316, 28.36707615303262, 28.46562849070546, 28.56419647471472, 28.66278044869319, 28.761380752449828, 28.85999772171889, 28.958631687902926, 29.05728297780937, 29.15595191338074, 29.25463881141816, 29.35334398329825, 29.45206773468305, 29.550810365223096, 29.649572168253307, 29.748353430481615, 29.847154431670326, 29.945975444309898, 30.04481673328518, 30.1436785555339, 30.242561159697267, 30.34146478576272, 30.440389664698465, 30.539336018079933, 30.63830405770794, 30.737293985218415, 30.83630599168371, 30.935340257205286, 31.03439695049783, 31.133476228464566, 31.232578235763846, 31.33170310436685, 31.430850953106386, 31.5300218872168, 31.62921599786488, 31.72843336167171, 31.827674040225666, 31.926938079586307, 32.02622550977931, 32.12553634428248, 32.22487057950292, 32.32422819424523, 32.4236091491711, 32.52301338625021, 32.62244082820255, 32.721891377932465, 32.821364917954334, 32.92086130981036, 33.02038039348042, 33.11992198678438, 33.21948588477702, 33.319071859136, 33.41867965754301, 33.51830900305855, 33.6179595934908, 33.71763110075879, 33.81732317025048, 33.91703542017617, 34.01676744091774, 34.11651879437436, 34.21628901330517, 34.316077600669594, 34.41588402896597, 34.51570773956926, 34.61554814206855, 34.71540461360518, 34.815276498212114, 34.915163106156605, 35.01506371328273, 35.11497756037121, 35.21490385245601, 35.31484175832833, 35.41479040937562, 35.51474890092913, 35.61471628432509, 35.71469159357442, 35.81467374320766, 35.9146619061811, 36.01465410229408, 36.114652460123075, 36.214643414351556, 36.31459162895567, 36.41459645767571, 36.51459516382407, 36.61459551051057, 36.7145954176162, 36.814595442507176, 36.91459543583766, 37.014595437624756, 37.1145954371459, 37.214595437274205, 37.31459543723983, 37.41459543724904, 37.51459543724657, 37.614595437247225, 37.714595437247056, 37.81459543724711, 37.914595437247094, 38.014595437247095, 38.1145954372471]
    #
    # waypoint_y = [0.0, 2.6469779601696886e-23, -1.0587911840678754e-22, 1.9686477731698602e-06, 7.858216148623485e-06, 1.9604604132871673e-05, 3.912733785705495e-05, 6.832957129910464e-05, 0.00010909808673461688, 0.00016330329487163422, 0.0002327992346292762, 0.0003194235725223028, 0.00042499760161704864, 0.0005513262400268921, 0.000700198028918435, 0.0008733851300024044, 0.001072643322485595, 0.00129971199946339, 0.0015563141637345277, 0.001844156423022405, 0.0021649289845897036, 0.002520305649235471, 0.002911943804666036, 0.003341484418233452, 0.0038105520290372596, 0.004320754739387486, 0.004873684205629027, 0.005470915628329078, 0.006114007741831858, 0.006804502803186111, 0.0075439265804532075, 0.00833378834040486, 0.009175580835621701, 0.010070780291005187, 0.011020846389717114, 0.012027222258562351, 0.013091334452832028, 0.014214592940625732, 0.01539839108667253, 0.016644105635672, 0.017953096695177834, 0.01932670771804729, 0.020766265484481575, 0.02227308008368264, 0.023848444895153198, 0.025493636569667875, 0.02720991500994408, 0.02899852335104175, 0.030860687940522966, 0.032797618318401806, 0.034810507196916515, 0.03690053044015637, 0.03906884704357609, 0.041316599113431426, 0.04364491184616988, 0.046054893507810966, 0.04854763541335108, 0.05112421190622767, 0.05378568033787886, 0.056533081047433535, 0.05936743734156855, 0.062289755474568234, 0.06530102462862306, 0.06840221689440346, 0.07159428725194485, 0.07487817355188026, 0.07825479649705633, 0.0817250596245688, 0.08528984928825355, 0.08895003464166788, 0.09270646762159836, 0.09655998293212902, 0.10051139802930574, 0.10456151310643004, 0.10871111108001613, 0.11296095757644536, 0.11731180091934967, 0.12176437211775679, 0.12631938485502917, 0.13097753547862653, 0.13573950299072374, 0.14060594903971196, 0.14557751791261372, 0.15065483652843775, 0.15583851443250346, 0.161129143791759, 0.16652729939112002, 0.1720335386308533, 0.17764840152502775, 0.18337241070105842, 0.1892060714003619, 0.19514987148014587, 0.2012042814163517, 0.20736975430776902, 0.21364672588133982, 0.2200356144986677, 0.226536821163749, 0.23315072953193736, 0.23987770592015872, 0.2467180993183838, 0.25367224140237254, 0.260740446547697, 0.2679230118450527, 0.27522021711686495, 0.2826323249351944, 0.290159580640948, 0.2978022123643978, 0.3055604310470084, 0.3134344304645756, 0.32142438725167366, 0.3295304609274105, 0.3377527939224863, 0.3460915116075514, 0.3545467223228597, 0.36311851740920603, 0.37180697124014256, 0.3806121412554647, 0.3895340679959518, 0.39857277513935596, 0.4077282695376202, 0.41700054125531516, 0.4263895636092761, 0.43589529320942344, 0.4455176700007505, 0.45525661730645606, 0.465112041872202, 0.47508383391147585, 0.48517186715203203, 0.4953759988833915, 0.5056960700053714, 0.5161319050776195, 0.526683312370127, 0.5373500839146893, 0.5481319955572892, 0.5590288070113658, 0.5700402619119447, 0.5811660878705917, 0.5924059965311599, 0.6037596836262972, 0.6152268290346734, 0.6268070968388972, 0.6385001353840857, 0.6503055773370444, 0.662223039746025, 0.6742521241010189, 0.6863924163945491, 0.6986434871829169, 0.7110048916478661, 0.7234761696586217, 0.7360568458342602, 0.7487464296063712, 0.7615444152819644, 0.7744502821065791, 0.787463494327557, 0.8005835012574235, 0.8138097373373442, 0.8271416222006016, 0.8405785607360534, 0.8541199431515237, 0.8677651450370788, 0.8815135274281455, 0.8953644368684228, 0.9093172054725387, 0.9233711509884094, 0.9375255768592489, 0.9517797722851844, 0.966133012284433, 0.9805845577539825, 0.995133655529743, 1.0097795384461075, 1.0245214253948836, 1.0393585213835497, 1.0542900175927779, 1.0693150914331886, 1.0844329066012814, 1.0996426131345003, 1.1149433474653858, 1.1303342324747598, 1.1458143775439107, 1.1613828786057192, 1.1770388181946865, 1.1927812654958208, 1.2086092763923235, 1.2245218935120523, 1.2405181462726926, 1.256597050925609, 1.272757610598332, 1.28899881533562, 1.3053196421390791, 1.3217190550052733, 1.3381960049622985, 1.3547494301047722, 1.371378255627196, 1.3880813938556549, 1.4048577442778076, 1.4217061935711286, 1.4386256156293664, 1.455614871587172, 1.4726728098428647, 1.489798266079298, 1.506990063282775, 1.52424701176, 1.5415679091530021, 1.5589515404520213, 1.5763966780063012, 1.5939020815327636, 1.6114664981225315, 1.6290886622452632, 1.6467672957512567, 1.664501107871288, 1.682288795214202, 1.7001290417621941, 1.7180205188637225, 1.7359618852240528, 1.7539517868933994, 1.7719888572526314, 1.7900717169965268, 1.8081989741145321, 1.8263692238690201, 1.8445810487710064, 1.8628330185533064, 1.881123690141112, 1.8994516076199541, 1.917815302201045, 1.9362132921839708, 1.9546440829167053, 1.97310616675295, 1.9915980230067565, 2.0101181179044274, 2.028664904533682, 2.047236822790058, 2.065832299320554, 2.084449747464476, 2.1030875671914986, 2.1217441450369177, 2.1404178540340864, 2.159107053644022, 2.1778100896821844, 2.1965252942424183, 2.2152509856180456, 2.233985468220112, 2.2527270324927877, 2.271473954825914, 2.2902244974647004, 2.308976908416577, 2.3277294213551976, 2.346480255521614, 2.365227615622607, 2.3839696917262074, 2.4027046591544003, 2.42143067837303, 2.4401458948789267, 2.4588484390842598, 2.47753642619815, 2.496207956105555, 2.514861113243444, 2.5334939664743152, 2.552104568957039, 2.5706909580151103, 2.5892511550023025, 2.607783165165784, 2.6262849775067245, 2.6447545646384425, 2.663189882642132, 2.681588870920233, 2.699949452047469, 2.7182695316196464, 2.7365469981001924, 2.754779722664646, 2.772965559043093, 2.791102343360567, 2.8091878939755546, 2.8272200113166535, 2.8451964777174936, 2.863115057250011, 2.8809734955561463, 2.898769519678111, 2.9165008378872876, 2.934165139511913, 2.951760094763639, 2.9692833545631063, 2.9867325503646707, 3.0041052939804027, 3.0213991774035285, 3.0386117726314454, 3.055740631488492, 3.0727832854486254, 3.08973724545819, 3.1066000017589652, 3.1233690237116813, 3.1400417596202086, 3.1566156365566327, 3.173088060187431, 3.1894564146009965, 3.205718062136736, 3.221870343216001, 3.2379105761751164, 3.2538360571007785, 3.2696440596681073, 3.2853318349816596, 3.3008966114196983, 3.316335594482052, 3.3316459666419, 3.3468248872018243, 3.3618694921545007, 3.376776894048396, 3.391544181858872, 3.4061684208650904, 3.4206466525331507, 3.434975894405894, 3.449153139999814, 3.4631753587095586, 3.477039495720494, 3.490742471929836, 3.504281183876874, 3.5176525036827955, 3.5308532790007012, 3.543880332976346, 3.55673046422021, 3.569400446791506, 3.581887030194728, 3.594186939389409, 3.6062968748137227, 3.6182135124226216, 3.6299335037411975, 3.6414534759339903, 3.652770031890958, 3.6638797503308815, 3.6747791859229446, 3.6854648694273004, 3.69593330785541, 3.706180984650966, 3.7162043598922585, 3.7259998705168096, 3.7355639305691515, 3.7448929314726356, 3.7539832423261377, 3.7628312102266017, 3.7714331606183022, 3.779785397669774, 3.787884204679335, 3.7957258445101423, 3.803306560055735, 3.8106225747370166, 3.8176700930316136, 3.8244453010366026, 3.8309443670655003, 3.8371634422805845, 3.8430986613611173, 3.8487461432097705, 3.8541019916930934, 3.859162296435746, 3.8639231335998385, 3.868380566907481, 3.8725306479550756, 3.8763694193492078, 3.879892907575017, 3.8830971541936306, 3.88597810480956, 3.8885320272035333, 3.8907539603424866, 3.892643496473818, 3.8941832404404924, 3.8954191222116523, 3.896160874036352, 3.8971091597088168, 3.9002250746206375, 3.899939691437164, 3.900016159630709, 3.8999956700400014, 3.900001160209285, 3.899999689122859, 3.900000083299279, 3.899999977680025, 3.900000005980619, 3.899999998397498, 3.900000000429389, 3.8999999998849453, 3.9000000000308286, 3.89999999999174, 3.9000000000022133, 3.899999999999407, 3.9000000000001585, 3.8999999999999573, 3.9000000000000123]
    #
    # waypoint_yaw = [8.807080250308791e-07, -1.7614160500602446e-06, 6.164956175140666e-06, 3.616102454952166e-05, 8.493743019631662e-05, 0.000153167946379218, 0.00024046444008951116, 0.00034672332444828015, 0.00047176477481213313, 0.0006154293970353709, 0.0007775523213883737, 0.0009579701398029051, 0.0011565190424292987, 0.0013730353120189412, 0.0016073551862467415, 0.001859314889137255, 0.0021287506169513455, 0.0024154985360758485, 0.002719394777520802, 0.0030402754321764173, 0.0033779765457423224, 0.0037323341136439227, 0.004103184075875101, 0.004490362311806347, 0.004893704634969099, 0.005313046787836858, 0.005748224436615895, 0.006199073166063605, 0.006665428474349227, 0.007147125767971963, 0.007644000356749831, 0.008155887448893482, 0.008682622146179457, 0.009224039439234034, 0.009779974202941221, 0.010350261191985897, 0.010934735036545197, 0.01153323023813739, 0.012145581165638627, 0.012771622051480292, 0.013411186988033211, 0.014064109924190122, 0.014730224662155572, 0.015409364854447978, 0.016101364001127473, 0.016806055447251698, 0.017523272380568743, 0.018252847829455264, 0.018994614661103772, 0.01974840557996498, 0.02051405312645146, 0.02129138967590859, 0.02208024743785361, 0.022880458455491345, 0.02369185460550661, 0.02451426759813912, 0.025347528977543297, 0.026191470122432732, 0.027045922247016588, 0.02791071640222595, 0.028785683477230366, 0.029670654201249373, 0.030565459145657704, 0.03146992872638311, 0.03238389320659889, 0.033307182699708775, 0.034239627172623945, 0.03518105644933092, 0.03613130021474989, 0.03709018801887837, 0.03805754928122015, 0.039033213295498276, 0.04001700923464491, 0.041008766156068265, 0.04200831300719129, 0.0430154786312585, 0.04403009177340785, 0.045051981086999655, 0.046080975140202145, 0.04711690242282416, 0.04815959135339272, 0.04920887028646996, 0.05026456752019649, 0.05132651130406551, 0.05239452984691479, 0.05346845132512868, 0.05454810389104639, 0.05563331568156752, 0.05672391482694757, 0.05781972945977596, 0.05892058772412809, 0.06002631778488347, 0.06113674783720183, 0.062251706116146534, 0.063371020906451, 0.06449452055241513, 0.06562203346792261, 0.06675338814657358, 0.06788841317192117, 0.0690269372277984, 0.07016878910873488, 0.07131379773044327, 0.07246179214037374, 0.07361260152832504, 0.07476605523709337, 0.07592198277316493, 0.07708021381742758, 0.07824057823589946, 0.07940290609045927, 0.08056702764957313, 0.08173277339900593, 0.08289997405250107, 0.08406846056242907, 0.08523806413038638, 0.08640861621773488, 0.08757994855607669, 0.08875189315764964, 0.0899242823256343, 0.09109694866436165, 0.09226972508941528, 0.09344244483761135, 0.09461494147685418, 0.09578704891585042, 0.09695860141367589, 0.09812943358918638, 0.09929938043026208, 0.10046827730287111, 0.10163595995995117, 0.10280226455009704, 0.1039670276260411, 0.10513008615292291, 0.10629127751633878, 0.10745043953015897, 0.10860741044410852, 0.10976202895110243, 0.11091413419432475, 0.1120635657740436, 0.11321016375416586, 0.11435376866850107, 0.11549422152675526, 0.11663136382021874, 0.11776503752717321, 0.11889508511797676, 0.12002134955985005, 0.12114367432134143, 0.12226190337646713, 0.12337588120852797, 0.12448545281358521, 0.12559046370360166, 0.12669075990923703, 0.1277861879822969, 0.1288765949978235, 0.12996182855582603, 0.13104173678266315, 0.13211616833204134, 0.1331849723856551, 0.13424799865345072, 0.1353050973735165, 0.13635611931158817, 0.13740091576018035, 0.13843933853732815, 0.13947123998495053, 0.1404964729667993, 0.14151489086606894, 0.14252634758255955, 0.14353069752948222, 0.14452779562985807, 0.1455174973125196, 0.14649965850772798, 0.1474741356423832, 0.14844078563483962, 0.14939946588933345, 0.15035003429000485, 0.1512923491945244, 0.15222626942733683, 0.15315165427248864, 0.15406836346608427, 0.1549762571883396, 0.1558751960552346, 0.15676504110979828, 0.15764565381299253, 0.15851689603420113, 0.15937863004135674, 0.16023071849066337, 0.1610730244159596, 0.16190541121768778, 0.1627277426514909, 0.1635398828164605, 0.16434169614297234, 0.16513304738020348, 0.16591380158324634, 0.16668382409989807, 0.16744298055706605, 0.16819113684683795, 0.16892815911220252, 0.16965391373240948, 0.17036826730801782, 0.17107108664558096, 0.17176223874201374, 0.17244159076862914, 0.1731090100548524, 0.17376436407160847, 0.17440752041441676, 0.17503834678615093, 0.1756567109795114, 0.17626248085919755, 0.17685552434377932, 0.17743570938728617, 0.1780029039737117, 0.17855697609302246, 0.17909779369333018, 0.17962522468154338, 0.1801391369038609, 0.18063939812575075, 0.18112587601168195, 0.1815984381046134, 0.1820569518052482, 0.18250128435105908, 0.1829313027951009, 0.18334687398459615, 0.18374786453931924, 0.18413414082978685, 0.18450556895523798, 0.18486201472145924, 0.18520334361839763, 0.18552942079762902, 0.18584011104966136, 0.18613527878107203, 0.1864147879915225, 0.18667850225062171, 0.18692628467466021, 0.1871579979032595, 0.187373504075855, 0.18757266480815016, 0.18775534116844178, 0.18792139365386934, 0.18807068216661435, 0.18820306599003772, 0.1883184037647719, 0.18841655346479155, 0.1884973723734478, 0.1885607170595173, 0.1886064433532276, 0.18863440632235307, 0.18864446024829282, 0.18863645860221454, 0.18861025402127918, 0.18856569828492567, 0.18850264229125488, 0.18842093603353305, 0.18832042857680806, 0.18820096803467515, 0.18806240154624257, 0.18790457525322116, 0.1877273342772658, 0.18753052269753023, 0.1873139835284368, 0.18707755869777945, 0.186821089025044, 0.18654441420009318, 0.18624737276218525, 0.18592980207933488, 0.18559153832807684, 0.18523241647368052, 0.18485227025075762, 0.18445093214438116, 0.18402823338550262, 0.18358400394152982, 0.18311807244312356, 0.18263026619942224, 0.182120411183852, 0.18158833201880625, 0.18103385196105273, 0.18045679288787678, 0.179856975284047, 0.17923421822962668, 0.1785883393886598, 0.17791915499880825, 0.17722647986198362, 0.17651012733599666, 0.17576990932728154, 0.17500563628480956, 0.17421711719513053, 0.17340415957871855, 0.17256656948762786, 0.17170415150447482, 0.17081670874291083, 0.16990404284956087, 0.1689659540075406, 0.16800224094162358, 0.16701270092510742, 0.16599712978845593, 0.16495532192982595, 0.16388707032752134, 0.16279216655446443, 0.16167040079479786, 0.1605215618626362, 0.1593454372231492, 0.1581418130159825, 0.15691047408116127, 0.1556512039875576, 0.15436378506401233, 0.15304799843323205, 0.1517036240485589, 0.15033044073370436, 0.1489282262255896, 0.1474967572203512, 0.14603580942269845, 0.14454515759868633, 0.14302457563203727, 0.14147383658412865, 0.13989271275779486, 0.13828097576504458, 0.13663839659883042, 0.13496474570899203, 0.13325979308254346, 0.13152330832837517, 0.12975506076657534, 0.1279548195224486, 0.12612235362539972, 0.12425743211284875, 0.1223598241392412, 0.12042929909038522, 0.11846562670317119, 0.1164685771909118, 0.11443792137429792, 0.11237343081830327, 0.11027487797500382, 0.10814203633252067, 0.10597468057026296, 0.10377258672050668, 0.10153553233652454, 0.09926329666732851, 0.096955660839231, 0.09461240804421422, 0.09223332373535599, 0.08981819582932007, 0.08736681491606976, 0.08487897447582818, 0.08235447110346789, 0.07979310474030764, 0.0771946789134392, 0.074559000982601, 0.07188588239467908, 0.06917513894576932, 0.06642659105125086, 0.06364006402203987, 0.06081538835400082, 0.05795240000436867, 0.055050940752453266, 0.05211085828183336, 0.04913200733605252, 0.04611424690663163, 0.04305745225054086, 0.039961471638145264, 0.03682628926668717, 0.03365141923058035, 0.030438167821621374, 0.027181195666564986, 0.023899999206943186, 0.020521454804469652, 0.017318073780635154, 0.013272702337116644, 0.012180741097859412, -0.0001206843630699325, 0.031214037361357482, 0.010942318233698269, -0.002931405771138581, 0.0007855192988263055, -0.00021047575491551897, 5.6397063990842494e-05, -1.5111529482720386e-05, 4.049123434304197e-06, -1.084959260030394e-06, 2.9071396431269944e-07, -7.789657148076467e-08, 2.0872323458697815e-08, -5.592722221423119e-09, 1.4985654365424734e-09, -4.0153952406873995e-10, 1.0759265978258333e-10, -2.8831115058482137e-11, 7.731800451709426e-12, -2.0960867483671482e-12, 6.525465417684695e-13]



    #初始状态获取
    thr_list_hv = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9590499997138977, 0.9713000059127808, 0.9829000234603882, 0.9944999814033508, 1.0, 1.0, 1.0, 0.9373499751091003, 0.8431500196456909, 0.8496000170707703, 0.7518500089645386, 0.7554000020027161, 0.6547499895095825, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582, 0.6553999781608582]

    bra_list_hv = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

    str_list_hv = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.236863580648787e-05, 6.982198101468384e-05, 8.727514068596065e-05, 0.00010472875874256715, 0.0001221823476953432, 0.00013963606033939868, 0.0001570899476064369, 0.00017454380576964468, 0.00019199734379071742, 0.00019199714006390423, 0.00019199705275241286, 0.00019199696544092149, 0.00019199727103114128, 0.00017454393673688173, 0.00013963675883132964, 8.727546082809567e-05, 5.236790093476884e-05, 3.4914137359010056e-05, 6.982126797083765e-05, 0.00015708977298345417, 0.0002443587873131037, 0.0002618128783069551, 0.00024435960222035646, 0.00020945249707438052, 0.00017454562475904822, 0.00013963866513222456, 0.00010473151633050293, 6.982430204516277e-05, 5.2370673074619845e-05, 3.4917029552161694e-05, 3.491705865599215e-05, 3.491712050163187e-05, 3.491717507131398e-05, 3.491725874482654e-05, 3.4917302400572225e-05, 3.491736060823314e-05, 3.4917415177915245e-05, 3.491743700578809e-05, 1.7463757103541866e-05, 1.7463793483329937e-05, 3.491757524898276e-05, 3.491766983643174e-05, 3.491776806185953e-05, 3.49178008036688e-05]


    thr_list_ov = [0.6430799961090088, 0.6783599853515625, 0.7175400257110596, 0.7567200064659119, 0.7958999872207642, 0.8350800275802612, 0.8742600083351135, 0.9134399890899658, 0.9526200294494629, 0.8846200108528137, 0.9179199934005737, 0.8433899879455566, 0.8701599836349487, 0.7890999913215637, 0.8093400001525879, 0.721750020980835, 0.7354599833488464, 0.748520016670227, 0.6543999910354614, 0.6615800261497498, 0.6681100130081177, 0.6746399998664856, 0.6811699867248535, 0.6876999735832214, 0.5870500206947327, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083, 0.5877000093460083]

    bra_list_ov = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

    str_list_ov = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.491466850391589e-05, 5.236812285147607e-05, 6.982171908020973e-05, 6.982048216741532e-05, 8.727460954105482e-05, 0.00010472866415511817, 0.00012218290066812187, 0.0001221822021761909, 0.00012218207120895386, 0.0001221819838974625, 0.00010472741269040853, 0.00010472758003743365, 0.00010472774010850117, 8.727366366656497e-05, 8.727370732231066e-05, 8.727396925678477e-05, 6.981984188314527e-05, 6.982008926570415e-05, 5.236612196313217e-05, 5.236632205196656e-05, 3.491222014417872e-05, 3.4912263799924403e-05, 1.7458101865486242e-05, 1.745812733133789e-05, 1.745814734022133e-05, 1.745813642628491e-05, 1.7458134607295506e-05, 1.745814734022133e-05, 1.7458150978200138e-05, 3.970436424083346e-09, 3.980099361200473e-09, 1.7458174625062384e-05, 1.7458169168094173e-05, 4.0279912738583334e-09, 4.038854584109686e-09, 4.033355871513322e-09, 1.745822373777628e-05, 1.74582346517127e-05, 4.086130989122694e-09, 4.081978310921386e-09, 4.077834070415065e-09, 4.091293526187201e-09, 1.7458312868257053e-05, 4.168776435165e-09, 4.1821248686346735e-09, 1.7458351067034528e-05, 4.227012517787898e-09, 4.240996442916867e-09, 4.254961272209812e-09, 1.7458463844377548e-05]

    #num = len(thr_list)

    
    cos_x = []
    cos_y = []
    cos_index = 0


    
    thr_list_red = []
    bra_list_red = []
    str_list_red = []

    pos_x_red = []
    pos_y_red = []
    vel_red = []
    head_red = []

    # ==============================================================================
    # -- main --------------------------------------------------------------------
    # ==============================================================================
    ### main service
    # local port 2000
    client = carla.Client(host='127.0.0.1',port=2000)
    # overtime
    client.set_timeout(20.0)
    # world function
    #world = client.load_world("Town04")
    world = client.get_world()
    # world blue print
    blueprint_library = world.get_blueprint_library()

    # actor generation in world
    bp = blueprint_library.find('vehicle.ford.mustang')
    transform = Transform(Location(x=-355.724, y=29.8407, z=1.2029), Rotation(pitch=0,yaw=0,roll=0))

    # transform = Transform(Location(x=20, y=4, z=11), Rotation(pitch=0, yaw=0, roll=0))
    vehicle = world.spawn_actor(bp, transform)

    time.sleep(2)


    state_initialization(waypoint_v[0])

    cos_x.append(round(vehicle.get_transform().location.x,3))
    cos_y.append(round(vehicle.get_transform().location.y,3))

    v,x,y,yaw = state_req(vehicle.get_velocity(),vehicle.get_transform(),cos_x[-1],cos_y[-1])
    print(v,x,y,yaw)
    target_idx, _ = calc_target_index(x,y,yaw, waypoint_x, waypoint_y)    

    for i in range (int(10000000)) :
    
        v,x,y,yaw = state_req(vehicle.get_velocity(),vehicle.get_transform(),cos_x[cos_index],cos_y[cos_index])
        pos_x_red.append(x)
        pos_y_red.append(y)
        vel_red.append(v)
        head_red.append(yaw)

        
        # throttle,brake = 0.6520640254020691,0

        throttle,brake=Longitudinal_PID_control(waypoint_v[target_idx],v)  #纵向pid
        steer,target_idx = stanley_control(v,x,y,yaw, waypoint_x, waypoint_y, waypoint_yaw, target_idx)   #横向stanley

        #横纵向控制
        control.throttle = throttle
        control.brake = brake
        control.steer = -steer
        #if  abs(control.steer) > 1 :


        #str_red[0,i] = control.steer

        thr_list_red.append(control.throttle)
        bra_list_red.append(control.brake)
        str_list_red.append(control.steer)




        #if  i <= 9 :
        #    control.steer = 0

        vehicle.apply_control(control)
        time.sleep(dt)

        #if x > 17.5 and yaw <= 0.0001 :
        if x > (waypoint_x[-1] ) :  
            vehicle.destroy()
            break
    red = []
    red = [thr_list_red, bra_list_red, str_list_red]
    # str_list_red
    np_path = 'D:/py_workspace/carla_demo/image_output/driver'+ str(md) + '/control_follow_pid+stanley' + str(traj_i) + '.npy'
    np.save(np_path, red)


    plt_path = 'D:/py_workspace/carla_demo/image_output/driver'+ str(md) + '/waypoint_follow_pid+stanley' + str(traj_i) + '.jpg'
    plt.plot(pos_x_red, pos_y_red, ".r", label="course")
    plt.plot(waypoint_x, waypoint_y, "-b", label="trajectory")
    plt.legend()
    #plt.show()
    plt.savefig(plt_path)
    plt.close()





